# -*- coding: utf-8 -*-
"""Predvestniki.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eTj7KuPMUbimiVf_p-TVX_3X4wDGtLMt
"""

import numpy as np
import matplotlib.pyplot as plt

"""# Система Лоренца"""

def lorentz_system(x, r=24.2, s=10, beta=8/3): #параметры, обеспечивающие хаотичсекий режим r,s,beta
  return np.array([s * (x[1] - x[0]), x[0] * (r - x[2]) - x[1], x[0] * x[1] - beta * x[2]])

dt, Nt = 0.01, 10000
x0 = np.array([0., 1., 1.05])
points = np.zeros((Nt+1, 3))
points[0] = x0

for i in range(1, Nt+1):
  points[i] = points[i-1] + lorentz_system(points[i-1]) * dt

fig, ax = plt.subplots(subplot_kw={"projection": "3d"})
ax.plot(points[:, 0], points[:, 1], points[:, 2], lw=0.5)
ax.set_xlabel("$x$")
ax.set_ylabel("$y$")
ax.set_zlabel("$z$")

fig.show()

x = points[:, 0]
t = np.linspace(0, Nt * dt, Nt+1)

plt.plot(t, x)
plt.xlabel("$t$")
plt.ylabel("$x$")
plt.show()

"""# Алгоритм Грассбергера-Прокаччиа"""

def GP(arr, N, r_min=-2, r_max=0, N_r=6, plot=False):
  def C(r):
    S = 0
    for i in range(N-1):
      for j in range(i+1, N):
        S += (r > np.abs(np.linalg.norm(arr[j] - arr[i])))
    return 2 * S / (N * (N-1))

  r_arr = np.exp(np.linspace(r_min, r_max, N_r))
  C_arr = np.array([C(r) for r in r_arr])
  m, b = np.polyfit(np.log(r_arr), np.log(C_arr), 1)

  if plot:
    fig, ax = plt.subplots()
    ax.plot(np.log(r_arr), np.log(C_arr), marker=".", color="blue", label="$C(r)$")
    ax.plot(np.log(r_arr), m*np.log(r_arr) + b, color="red", ls="--", label=f"{m:.2f}*x + ({b:.3f})")
    ax.set_xlabel("$log(r)$")
    ax.set_ylabel("$log(C(r))$")
    fig.legend()
    return m, fig
  return m

t_prime_values = [50, 1000, 2000, 3000, 4000, 5000, 6000, 8000, 10000]
for tim_e in t_prime_values:
  m, fig = GP(points, tim_e, plot=True)
  #fig.show()
  print(m)

"""Получаются следующие результаты на временных отрезках для ширина окна - корелляционная размерность:


*   50 - 1.2776449000953296
*   1000 - 1.929047009129559
*   2000 - 2.1652587686877585
*   3000 - 2.2487869308738597
*   4000 - 2.1503641541349308
*   5000 - 2.1844933023994892
*   6000 - 2.2133925176790687
*   8000 - 2.291585586551382
*   10000 - 2.27965826413875

Оценка близка к 2.07 - известной корреляционной размерности аттрактора Лоренца при t' >= 2000 & t'<=6000
"""

plt.plot([50, 1000, 2000, 3000, 4000, 5000, 6000, 8000, 10000], [1.2777, 1.9290, 2.1652, 2.2487, 2.150, 2.184, 2.213, 2.291, 2.279], color='g', marker=".")
plt.xlabel("Правая граница окна")
plt.ylabel("Размерность вложения")
plt.show()

