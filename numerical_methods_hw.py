# -*- coding: utf-8 -*-
"""numerical-methods_hw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10YQmpkjdl7ESwtlB_OWjYyd-bEPN9dDE
"""

#7.1.7 7.2.3 7.5.3
import numpy as np
import matplotlib.pyplot as plt
import math

def f(t, y):
  return y/t + t*np.sin(t)

def solf(t):
  return t*(-1*np.cos(t) + 2/np.pi)

y0 = 1
t0 = np.pi/2
T = t0 + 1
T0 = t0 + 0.5
h = 0.1

def euler(t0, y, h, T0):
    temp = -0
    while t0 < T0:
        temp = y
        y = y + h * f(t0, y)
        t0 = t0 + h

    return y

print(euler(t0, y0, h, T0))

def rungeKutta(t0, y0, T0, h):
    y = y0
    n = (int)((T0 - t0)/h)
    for i in range(1, n + 1):
        "Apply Runge Kutta Formulas to find next value of y"
        k1 = h * f(t0, y)
        k2 = h * f(t0 + 0.5 * h, y + 0.5 * k1)
        k3 = h * f(t0 + 0.5 * h, y + 0.5 * k2)
        k4 = h * f(t0 + h, y + k3)

        y = y + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)

        t0 = t0 + h
    return y

print(rungeKutta(t0, y0, T0, h))

"""
Решение:
y = t(-cost + 2/np.pi)
"""

step = (T0 - t0)/100 +t0
li = step

yarr1=np.zeros(10)
yarr2=np.zeros(10)
yarr3=np.zeros(10)
tarr1=np.linspace(np.pi/2, np.pi/2+1, 10, endpoint=False)
tarr2=np.linspace(np.pi/2, np.pi/2+1, 10, endpoint=False)
tarr3=np.linspace(np.pi/2, np.pi/2+1, 10, endpoint=False)

for i in range(0,10):
  yarr1[i] = euler(t0, y0, h, i)
  yarr2[i] = rungeKutta(t0, y0, i, h)
  yarr3[i] = solf(i)

plt.plot(tarr1, yarr1, color='b')
plt.plot(tarr2, yarr2, color='g')
plt.plot(tarr3, yarr3, color='r')
ax = plt.gca()
ax.set_xlim([np.pi/2, np.pi/2+1])
print(max(abs(yarr3-yarr1)))
print(max(abs(yarr3-yarr2)))

h3=h
while abs(rungeKutta(t0, y0, T0, 0.1) - euler(t0, y0, h3, T0)) > 0.01:
  h3 = h3/2
print(h3)

#7.2.3
#H k m f
#1 1 5 -t
#0.1
#10

#f(t)=-t
#x0 = 15 v0 = 0 T = 40
x0 = 15
T0 = 20
h = 0.1
v0 = 0

def f2(x2,t,H):
  return (-t-H*x2-1*(x2*t+15))/5

def rungeKutta(x0, v0, T0, h, H):
    y = v0
    n = (int)((T0 - x0)/h)
    for i in range(1, n + 1):
        "Apply Runge Kutta Formulas to find next value of y"
        k1 = h * f2(x0, y, H)
        k2 = h * f2(x0 + 0.5 * h, y + 0.5 * k1, H)
        k3 = h * f2(x0 + 0.5 * h, y + 0.5 * k2, H)
        k4 = h * f2(x0 + h, y + k3, H)

        y = y + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)

        x0 = x0 + h
    return y

H = 0.11
print(rungeKutta(0, v0, T0, h, H))

H = 1
print(rungeKutta(0, v0, T0, h, H))

H = 10
print(rungeKutta(0, v0, T0, h, H))

step = 0.4
li = 0

yarr1=np.zeros(100)
yarr2=np.zeros(100)
yarr3=np.zeros(100)
tarr1=np.linspace(t0, T, 100, endpoint=False)
tarr2=np.linspace(t0, T, 100, endpoint=False)
tarr3=np.linspace(t0, T, 100, endpoint=False)

for i in range(0,100):
  yarr1[i] = rungeKutta(0, v0, li, h, 0.1)
  yarr2[i] = rungeKutta(0, v0, li, h, 1)
  yarr3[i] = rungeKutta(0, v0, li, h, 10)
  li = li + step

plt.plot(tarr1, yarr1, color='b')
plt.plot(tarr2, yarr2, color='g')
plt.plot(tarr3, yarr3, color='r')

#7.5.3

def f7(t,y):
  return -25*y + 1.25*t-49.95

t0 = 0
T0 = 1.5/2
y0 = 0
h = 0.15
T=1.5

def solf7(t):
  return -2 + 0.05*t + math.exp(-25*t)

def euler(t0, y, T0, h):
    temp = -0
    while t0 < T0:
        temp = y
        y = y + h * f7(t0, y)
        t0 = t0 + h

    return y

print(euler(t0, y0, T0, h))

def rungeKutta(t0, y0, T0, h):
    y = y0
    n = (int)((T0 - t0)/h)
    for i in range(1, n + 1):
        "Apply Runge Kutta Formulas to find next value of y"
        k1 = h * f7(t0, y)
        k2 = h * f7(t0 + 0.5 * h, y + 0.5 * k1)
        k3 = h * f7(t0 + 0.5 * h, y + 0.5 * k2)
        k4 = h * f7(t0 + h, y + k3)

        y = y + (1.0 / 6.0)*(k1 + 2 * k2 + 2 * k3 + k4)

        t0 = t0 + h
    return y

print(rungeKutta(t0, y0, T0, h))

step = 0.15
li = 0

yarr1=np.zeros(15)
yarr2=np.zeros(15)
yarr3=np.zeros(15)
tarr1=np.linspace(0, 1.5, 15, endpoint=False)
tarr2=np.linspace(0, 1.5, 15, endpoint=False)
tarr3=np.linspace(0, 1.5, 15, endpoint=False)

for i in range(0,15):
  loci = i/10
  yarr1[i] = euler(t0, y0, loci, h)
  yarr2[i] = rungeKutta(t0, y0, loci, h)
  yarr3[i] = solf7(loci)

plt.plot(tarr1, yarr1, color='b')
plt.plot(tarr2, yarr2, color='g')
plt.plot(tarr3, yarr3, color='r')
ax = plt.gca()
ax.set_xlim([t0, T])

h1=h
st = 0
while abs(euler(t0, y0, T0, h1) - solf7(T0)) > 0.001:
  h1 = h1/2
  st+=1
print(st)

h2=h
st1 = 0
while abs(rungeKutta(t0, y0, T0, h2) - solf7(T0)) > 0.001:
  h2 = h2/2
  st1+=1
print(st1)